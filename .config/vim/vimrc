" Set compatibility to Vim only
set nocompatible

" Set environment
set directory=$HOME/.cache/vim
set backupdir=$HOME/.cache/vim
set viminfo+='1000,n$HOME/.local/share/vim/viminfo'
set runtimepath=$HOME/.local/vim,$VIM,$VIMRUNTIME
let $MYVIMRC="$HOME/.config/vim/vimrc"

" Install vim-plug
if !filereadable(expand('~/.local/vim/autoload/plug.vim'))
    silent !curl -fLo ~/.local/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync
endif

" Plugins
call plug#begin('~/.local/vim/plugged')
    Plug 'justincampbell/vim-eighties'
    Plug 'jiangmiao/auto-pairs'
    Plug 'wellle/targets.vim'
    Plug 'sheerun/vim-polyglot'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'tmux-plugins/vim-tmux-focus-events'
call plug#end()

" Basic configuration
set hidden
set noswapfile
let mapleader=","
set encoding=utf-8
set lazyredraw
set nowrap
set autoindent
set smartindent
set tabstop=8
set number relativenumber
set fixendofline
set backspace=indent,eol,start
syntax on
filetype plugin indent on

" UI
set background=dark
set t_Co=256
colorscheme simpleblack
set fillchars+=vert:│
set laststatus=2
set ruler
set showmatch
set title
set wildmenu
set noshowmode

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Auto reload on external change
set autoread
set updatetime=2000
autocmd CursorHold,CursorHoldI * checktime
autocmd FocusGained,BufEnter * :checktime

" Better scrolling
noremap J <C-d>
noremap K <C-u>

" File saving shortcuts
map <silent> <leader>q :qall!<cr>
map <silent> <leader>x :q!<cr>
map <leader>sudo :w !sudo tee % <CR><CR>
cmap W w
cmap Q q

" Copy/Paste from X11 clipboard
vnoremap <C-c> :!xclip -f -sel clip<CR>
map <C-v><C-v> mz:-1r !xclip -o -sel clip<CR>`z
map <F2> :set paste!<CR>

" Spell checking
map <F5> :setlocal spell! spelllang=en_us<CR>
map <F6> :setlocal spell! spelllang=es<CR>

" Tab characters
set list
set listchars=nbsp:¬,tab:»·,trail:·,extends:>
nnoremap <F3> :set list!<CR>

" Split
set splitbelow splitright
nmap <leader>cs :sp<CR>
nmap <leader>vs :vsp<CR>
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Easier moving of code blocks
vnoremap < <gv
vnoremap > >gv

" Folding with space
nnoremap <space> za

" File browser
let g:netrw_banner=0
let g:netrw_browse_split=0
let g:netrw_liststyle=3
let g:netrw_altv=1
nnoremap <leader><TAB> :Explore<CR>

" Ctags
let g:gutentags_file_list_command = 'fd --type f --hidden --exclude **/.git/'

" Fuzzy finding
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll)$',
\ }
let g:ctrlp_user_command = 'fd --type f --hidden --exclude **/.git/'
let g:ctrlp_show_hidden = 1
let g:ctrlp_use_caching = 1
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:25,results:25'
let g:ctrlp_switch_buffer = 'ETVH'
let g:ctrlp_max_history = 0
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_arg_map = 1
let g:ctrlp_types = ['fil']
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("h")': ['<c-c>', '<c-cr>', '<c-s>'],
\ }
let g:ctrlp_extensions = ['tag']

nnoremap <silent> <leader>f :CtrlP<CR>
nnoremap <silent> <leader>c :CtrlPTag<CR>

" Search
set ignorecase
set incsearch
set hlsearch
nnoremap <leader><leader> :nohlsearch<CR>

" Statusline
function! GitBranch()
    let l:is_git_dir = system('echo -n $(git rev-parse --is-inside-work-tree)')

    if l:is_git_dir is# 'true'
        let g:git_branch = trim(system('git rev-parse --abbrev-ref HEAD'))
    else
        let g:git_branch = ''
    endif
endfunction

function! StatuslineGit()
    return strlen(g:git_branch) > 0?' ['.g:git_branch.'] ':''
endfunction

let g:currentmode={
    \ 'n'  : 'NORMAL ',
    \ 'v'  : 'VISUAL ',
    \ 'V'  : 'V·LINE ',
    \ '' : 'V·BLOCK ',
    \ 'i'  : 'INSERT ',
    \ 'R'  : 'R ',
    \ 'Rv' : 'V·Replace ',
    \ 'c'  : 'Command ',
    \ 's'  : 'Substitute ',
\}

autocmd CursorHold,CursorHoldI * call GitBranch()
autocmd FocusGained,BufEnter * call GitBranch()

set statusline=
set statusline+=%#PmenuSel#
set statusline+=\ %{toupper(g:currentmode[mode()])}
set statusline+=%{&paste?'\ PASTE\ ':''}
set statusline+=%{&spell?'\ SPELL\ ':''}
set statusline+=%{StatuslineGit()}
set statusline+=%{gutentags#statusline()}
set statusline+=%#Normal#
set statusline+=\ %t
set statusline+=%=
set statusline+=%#PmenuSel#
set statusline+=\ [%{&fileformat}]
set statusline+=\ %Y
set statusline+=\ %l:%c
set statusline+=\ %p%%

" Vim Eighties
let g:eighties_enabled = 1
let g:eighties_minimum_width = 120

" Coc
set nobackup
set nowritebackup
set shortmess+=cF
set signcolumn=number

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
inoremap <silent><expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <NUL> coc#refresh()

nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)
nmap <silent> <leader>r <Plug>(coc-rename)

nnoremap <silent> <leader>k :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
