" Set compatibility to Vim only
set nocompatible

" Set environment
set directory=$HOME/.cache/vim
set backupdir=$HOME/.cache/vim
set viminfo+='1000,n$HOME/.local/share/vim/viminfo'
set runtimepath=$HOME/.local/vim,$VIM,$VIMRUNTIME
let $MYVIMRC="$HOME/.config/vim/vimrc"

" Install vim-plug
if !filereadable(expand('~/.local/vim/autoload/plug.vim'))
    silent !curl -fLo ~/.local/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync
endif

" Plugins
call plug#begin('~/.local/vim/plugged')
Plug 'justincampbell/vim-eighties' " Auto resize windows
Plug 'preservim/nerdcommenter' " Comment stuff out
Plug 'jiangmiao/auto-pairs' " Insert or delete brackets, parens, quotes in pair
Plug 'editorconfig/editorconfig-vim' " EditorConfig support
Plug 'ryanoasis/vim-devicons' " File type icons
Plug 'tpope/vim-fugitive' " Git wrapper
Plug 'gcmt/taboo.vim' " Utils for tabs
Plug 'vim-airline/vim-airline' " Status line
Plug 'sheerun/vim-polyglot' " Syntax highlight
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Autocompletion
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " Fuzzy Finding
Plug 'junegunn/fzf.vim' " Fuzzy Finding
Plug 'tmux-plugins/vim-tmux-focus-events' " Catch window focus on tmux
call plug#end()

" Basic configuration
set noswapfile
let mapleader=","
set encoding=utf-8
set lazyredraw
set wrap
set autoindent
set smartindent
set tabstop=8
set number relativenumber
set fixendofline
set backspace=indent,eol,start
syntax on
filetype plugin indent on

" UI
set background=dark
set t_Co=256
colorscheme neon
set fillchars+=vert:│
set laststatus=2
set ruler
set showmatch
set title
set wildmenu
map <leader>dark :highlight Normal ctermbg=232<CR>
highlight WhiteOnRed ctermbg=red ctermfg=white
highlight ColorColumn ctermbg=124 ctermfg=white

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Not show file on buflist when close
autocmd BufReadPost * set bufhidden=wipe

" Auto reload on external change
set autoread
set updatetime=2000
au CursorHold,CursorHoldI * checktime
au FocusGained,BufEnter * :checktime

" Better scrolling
noremap J <C-d>
noremap K <C-u>

" File saving shortcuts
map <silent> <leader>wq :wq<cr>
map <silent> <leader>ww :wall!<cr>
map <silent> <leader>q :qall!<cr>
map <silent> <leader>x :q!<cr>
map <leader>sudo :w !sudo tee % <CR><CR>

" Copy/Paste from X11 clipboard
vnoremap <C-c> :!xclip -f -sel clip<CR>
map <C-v><C-v> mz:-1r !xclip -o -sel clip<CR>`z
map <F2> :set paste!<CR>

" Spell checking
map <F5> :setlocal spell! spelllang=en_us<CR>
map <F6> :setlocal spell! spelllang=es<CR>

" Tab characters
set list
set listchars=nbsp:¬,tab:»·,trail:·,extends:>
nnoremap <F3> :set list!<CR>

" Split
set splitbelow splitright
nmap <leader>hs :sp<CR>
nmap <leader>vs :vsp<CR>
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Compile a document
map <leader>c :w! \| !compiler <c-r>%<CR>

" Easier moving of code blocks
vnoremap < <gv
vnoremap > >gv

" Folding with space
nnoremap <space> za

" Remove all trailing spaces
autocmd BufWritePre * %s/\s\+$//e

" File browser
let g:netrw_banner=0
let g:netrw_browse_split=0
let g:netrw_liststyle=3
let g:netrw_altv=1
nnoremap <leader><TAB> :Explore<CR>

" Fuzzy finding
if executable('fd')
	let $FZF_DEFAULT_COMMAND='fd --type f'
endif
let $FZF_DEFAULT_OPTS='
	\ --reverse
	\ --color=fg:#ff5f00,bg:#080808,hl:#ff5f00
	\ --color=fg+:#00ff00,bg+:#000087,hl+:#00ff00
	\ --color=info:#af5fff,prompt:#ffff00,pointer:#00a2ff
	\ --color=marker:#ff0000,spinner:#0087ff,header:#ffffff'
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8  }  }
nnoremap <silent> <Leader>f :Files<CR>

" Sessions management
let session_directory='~/.local/vim/session/'
set sessionoptions-=options
map <expr> <leader>save ':mksession! ' . session_directory
map <expr> <leader>load ':source ' . session_directory

" Search
set ignorecase
set incsearch
set hlsearch
nnoremap <silent> n n:call HLNext(0.4)<CR>
nnoremap <silent> N N:call HLNext(0.4)<CR>
nnoremap <leader><leader> :nohlsearch<CR>

function! HLNext(blinktime)
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#'.@/
    let blinks = 3
    for n in range(1,blinks)
        let red = matchadd('WhiteOnRed', target_pat, 101)
        redraw
        exec 'sleep' . float2nr(a:blinktime / (2*blinks) * 1000) . 'm'
        call matchdelete(red)
        redraw
        exec 'sleep' . float2nr(a:blinktime / (2*blinks) * 1000) . 'm'
    endfor
endfunction

" Vim Eighties
let g:eighties_enabled = 1
let g:eighties_minimum_width = 120

" Vim Airline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols_branch = ''
let g:airline_symbols_readonly = ''
let g:airline_symbols_linenr = '☰'
let g:airline_symbols_maxlinenr = ''
let g:airline_symbols_dirty='⚡'
let g:airline_section_x = '%{WebDevIconsGetFileTypeSymbol()}'

" Taboo
let g:taboo_modified_tab_flag='+'
let g:taboo_tab_format=' [%m%f - %W] '
let g:taboo_renamed_tab_format=' [%l%m - %W] '
set sessionoptions+=tabpages,globals
map <leader>tr :TabooRename<space>
map <leader>t :TabooOpen<space>
map <leader>h :tabprevious<CR>
map <leader>l :tabnext<CR>

" NERD commenter
let g:NERDAllowAnyVisualDelims=1
let g:NERDCommentEmptyLines=1
let g:NERDCompactSexyComs=0
let g:NERDCreateDefaultMappings=0
let g:NERDDefaultAlign='left'
let g:NERDSpaceDelims=1
let g:NERDToggleCheckAllLines=1
let g:NERDTrimTrailingWhitespace=1
let g:NERDCustomDelimiters={
	\ 'javascript': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' },
	\ 'python': { 'left': '#', 'leftAlt': '"""', 'rightAlt': '"""' },
	\ 'sh': { 'left': '#' }
\ }

nmap <silent> gcc <Plug>NERDCommenterToggle
vmap <silent> gc <Plug>NERDCommenterSexy
vmap <silent> gd <Plug>NERDCommenterUncomment

" Coc
set nobackup
set nowritebackup
set cmdheight=2
set shortmess+=c
set signcolumn=no

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <silent><expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <NUL> coc#refresh()

nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)
nmap <silent> <leader>r <Plug>(coc-rename)

nnoremap <silent> <leader>k :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

call coc#config('languageserver', {
	\ 'ccls': {
	\   'command': 'ccls',
	\   'filetypes': [
	\     'c',
	\     'cpp',
	\     'objc',
	\     'objcpp'
	\   ],
	\   'rootPatterns': [
	\     '.ccls',
	\     'compile_commands.json',
	\     '.vim/',
	\     '.git/',
	\     '.hg/'
	\   ],
	\   'initializationOptions': {
	\     'cache': {
	\       'directory': '/tmp/ccls'
	\     }
	\   }
	\ }
	\})

"" LaTeX
autocmd VimLeave *.tex !texclear %

"" Python
autocmd FileType python set expandtab
autocmd FileType python set softtabstop=4
autocmd FileType python set shiftwidth=4
autocmd FileType python call matchadd('ColorColumn', '\%81v', 100)

"" Shell and JS
autocmd FileType sh,javascript set expandtab
autocmd FileType sh,javascript set softtabstop=2
autocmd FileType sh,javascript set shiftwidth=2
autocmd FileType sh,javascript call matchadd('ColorColumn', '\%80v', 100)

"" C/C++
autocmd FileType c,cpp call matchadd('ColorColumn', '\%79v', 100)

