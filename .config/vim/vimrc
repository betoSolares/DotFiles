" Set compatibility to Vim only
set nocompatible

" Set environment
set directory=$HOME/.cache/vim
set backupdir=$HOME/.cache/vim
set viminfo+='1000,n$HOME/.local/share/vim/viminfo'
set runtimepath=$HOME/.local/vim,$VIM,$VIMRUNTIME
let $MYVIMRC="$HOME/.config/vim/vimrc"

" Install vim-plug
if !filereadable(expand('~/.local/vim/autoload/plug.vim'))
    silent !curl -fLo ~/.local/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync
endif

" Plugins
call plug#begin('~/.local/vim/plugged')
Plug 'tpope/vim-surround' " Surrounding more easy
Plug 'junegunn/goyo.vim' " Distraction free writing
Plug 'justincampbell/vim-eighties' " Auto resize windows
Plug 'tpope/vim-commentary' " Comment stuff out
Plug 'ryanoasis/vim-devicons' " File type icons
Plug 'tpope/vim-fugitive' " Git wrapper
Plug 'gcmt/taboo.vim' " Utils for tabs
Plug 'vim-airline/vim-airline' " Status line
Plug 'vim-airline/vim-airline-themes' " Themes for vim-airline
Plug 'sheerun/vim-polyglot' " Syntax highlight
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Autocompletion
Plug 'itchyny/landscape.vim'
call plug#end()

" Basic configuration
let mapleader=","
set encoding=utf-8
set hidden
set lazyredraw
set path+=**
set wrap
set autoindent
set smartindent
set tabstop=8
syntax on
set relativenumber
set backspace=indent,eol,start
filetype plugin indent on

" UI
set background=dark
set fillchars+=vert:│
set laststatus=2
set ruler
set showmatch
set title
set wildmenu
map <leader>dark :highlight Normal ctermbg=232<CR>
map <leader>f :find<space>
highlight WhiteOnRed ctermbg=red ctermfg=white
highlight ColorColumn ctermbg=magenta

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" File saving shortcuts
map <silent> <leader>wq :wq<cr>
map <silent> <leader>ww :wall!<cr>
map <silent> <leader>q :qall!<cr>
map <silent> <leader>x :q!<cr>
map <leader>sudo :w !sudo tee % <CR><CR>

" Copy/Paste from X11 clipboard
vnoremap <C-c> :!xclip -f -sel clip<CR>
map <C-v><C-v> mz:-1r !xclip -o -sel clip<CR>`z
map <F2> :set paste!<CR>

" Spell checking
map <F5> :setlocal spell! spelllang=en_us<CR>
map <F6> :setlocal spell! spelllang=es<CR>

" Tab characters
set list
set listchars=nbsp:¬,tab:»·,trail:·,extends:>
nnoremap <F3> :set list!<CR>

" Split
set splitbelow splitright
nmap <leader>hs :sp<CR>
nmap <leader>vs :vsp<CR>
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Compile a document
map <leader>c :w! \| !compiler <c-r>%<CR>

" Easier moving of code blocks
vnoremap < <gv
vnoremap > >gv

" Folding with space
nnoremap <space> za

" Remove all trailing spaces
autocmd BufWritePre * %s/\s\+$//e

" Navigating with guides
inoremap <leader><TAB> <Esc>/<++><Enter>
vnoremap <leader><TAB> <Esc>/<++><Enter>
map <leader><TAB> <Esc>/<++><Enter>

" File browser
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_liststyle=3
let g:netrw_altv=1

" Sessions management
let session_directory='~/.local/vim/session/'
map <expr> <leader>save ':mksession! ' . session_directory
map <expr> <leader>open ':source ' . session_directory

" Search
set ignorecase
set incsearch
set hlsearch
nnoremap <silent> n n:call HLNext(0.4)<CR>
nnoremap <silent> N N:call HLNext(0.4)<CR>
nnoremap <leader><leader> :nohlsearch<CR>

function! HLNext(blinktime)
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#'.@/
    let blinks = 3
    for n in range(1,blinks)
        let red = matchadd('WhiteOnRed', target_pat, 101)
        redraw
        exec 'sleep' . float2nr(a:blinktime / (2*blinks) * 1000) . 'm'
        call matchdelete(red)
        redraw
        exec 'sleep' . float2nr(a:blinktime / (2*blinks) * 1000) . 'm'
    endfor
endfunction

" Vim Eighties
let g:eighties_enabled = 1
let g:eighties_minimum_width = 120

" Vim Airline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols_branch = ''
let g:airline_symbols_readonly = ''
let g:airline_symbols_linenr = '☰'
let g:airline_symbols_maxlinenr = ''
let g:airline_symbols_dirty='⚡'
let g:airline_section_x = '%{WebDevIconsGetFileTypeSymbol()}'

" Taboo
let g:taboo_modified_tab_flag='+'
let g:taboo_tab_format=' [%m%f - %W] '
let g:taboo_renamed_tab_format=' [%l%m - %W] '
set sessionoptions+=tabpages,globals
map <leader>tr :TabooRename<space>
map <leader>tn :TabooOpen<space>

" Coc
set nobackup
set nowritebackup
set cmdheight=2
set updatetime=3000
let g:coc_diagnostic_disable=1

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <silent><expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <NUL> coc#refresh()

nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)
nmap <silent> <leader>r <Plug>(coc-rename)
set signcolumn=no

"" LaTeX
autocmd BufNewFile,BufRead *.tex inoremap ,em \emph{}<++><Esc>T{i
autocmd BufNewFile,BufRead *.tex inoremap ,bf \textbf{}<++><Esc>T{i
autocmd BufNewFile,BufRead *.tex inoremap ,it \textit{}<++><Esc>T{i
autocmd BufNewFile,BufRead *.tex inoremap ,ol \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd BufNewFile,BufRead *.tex inoremap ,ul \begin{itemize}<Enter><Enter>\end{itemize}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd BufNewFile,BufRead *.tex inoremap ,li <Enter>\item<Space>
autocmd BufNewFile,BufRead *.tex inoremap ,sec \section{}<Enter><Enter><++><Esc>2kf}i
autocmd BufNewFile,BufRead *.tex inoremap ,ssec \subsection{}<Enter><Enter><++><Esc>2kf}i
autocmd BufNewFile,BufRead *.tex inoremap ,sssec \subsubsection{}<Enter><Enter><++><Esc>2kf}i
autocmd BufNewFile,BufRead *.tex inoremap ,beg \begin{DELRN}<Enter><++><Enter>\end{DELRN}<Enter><Enter><++><Esc>4k0fR:MultipleCursorsFind<Space>DELRN<Enter>c
autocmd BufNewFile,BufRead *.tex inoremap ,lab \label{}<Esc>T{i
autocmd BufNewFile,BufRead *.tex inoremap ,ref \ref{}<Esc>T{i
autocmd BufNewFile,BufRead *.tex inoremap ,ct \textcite{}<++><Esc>T{i
autocmd BufNewFile,BufRead *.tex inoremap ,cp \parencite{}<++><Esc>T{i
autocmd BufNewFile,BufRead *.tex inoremap ,ct \textcite{}<++><Esc>T{i
autocmd BufNewFile,BufRead *.tex inoremap ,cp \parencite{}<++><Esc>T{i
autocmd BufNewFile,BufRead *.tex inoremap ,chap \chapter{}<Enter><Enter><++><Esc>2kf}i
autocmd BufNewFile,BufRead *.tex inoremap ,up <Esc>/usepackage<Enter>o\usepackage{}<Esc>i
autocmd VimLeave *.tex !texclear %

"" Python
autocmd BufNewFile,BufRead *.py inoremap ,she #!/usr/bin/env python<Esc>o
autocmd BufNewFile,BufRead *.py inoremap ,fr from <++> import <++><Esc>0f<cw
autocmd BufNewFile,BufRead *.py inoremap ,wh while :<Enter><++><Esc>k0f:i
autocmd BufNewFile,BufRead *.py inoremap ,cl class (<++>):<Enter><++><Esc>k0f(i
autocmd BufNewFile,BufRead *.py inoremap ,def def (<++>):<Enter><++><Esc>k0f(i
autocmd BufNewFile,BufRead *.py inoremap ,adef async def (<++>):<Enter><++><Esc>k0f(i
autocmd BufNewFile,BufRead *.py inoremap ,if if :<Enter><++><Esc>k0f:i
autocmd BufNewFile,BufRead *.py inoremap ,el else:<Enter>
autocmd BufNewFile,BufRead *.py inoremap ,ei elif :<Enter><++><Esc>k0f:i
autocmd BufNewFile,BufRead *.py inoremap ,for for <++> in <++>:<Enter><++><Esc>k0f<cw
autocmd BufNewFile,BufRead *.py set expandtab
autocmd BufNewFile,BufRead *.py set softtabstop=4
autocmd BufNewFile,BufRead *.py set shiftwidth=4
autocmd BufNewFile,BufRead *.py set foldmethod=indent
autocmd BufNewFile,BufRead *.py call matchadd('ColorColumn', '\%81v', 100)

"" Shell
autocmd FileType sh inoremap ,bash #!/usr/bin/env bash<Esc>o
autocmd FileType sh inoremap ,sh #!/bin/sh<Esc>o
autocmd FileType sh inoremap ,case case "<++>" in<Enter><++><Enter>esac<Esc>2k0f"ci"
autocmd FileType sh inoremap ,if if [[<++>]]; then<Enter><++><Enter>fi<Esc>2k0f[lci[
autocmd FileType sh inoremap ,wh while [[<++>]]; do<Enter><++><Enter>done<Esc>2k0f[lci[
autocmd FileType sh inoremap ,for for <++> in "<++>"; do<Enter><++><Enter>done<Esc>2k0f<cw
autocmd FileType sh set expandtab
autocmd FileType sh set softtabstop=2
autocmd FileType sh set shiftwidth=2
autocmd FileType sh call matchadd('ColorColumn', '\%80v', 100)
