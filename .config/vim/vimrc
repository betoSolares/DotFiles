" Set compatibility to Vim only
set nocompatible

" Set environment
set directory=$HOME/.cache/vim
set backupdir=$HOME/.cache/vim
set viminfo+='1000,n$HOME/.local/share/vim/viminfo'
set runtimepath=$HOME/.local/vim,$VIM,$VIMRUNTIME
let $MYVIMRC="$HOME/.config/vim/vimrc"

" Install vim-plug
if !filereadable(expand('~/.local/vim/autoload/plug.vim'))
    silent !curl -fLo ~/.local/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync
endif

" Plugins
call plug#begin('~/.local/vim/plugged')
Plug 'myusuf3/numbers.vim' " Better line numbers
Plug 'tpope/vim-surround' " Surrounding more easy
Plug 'junegunn/goyo.vim' " Distraction free writing
Plug 'xolox/vim-misc' " Dependency for vim-session
Plug 'xolox/vim-session' " Better manage of sessions
Plug 'Asheq/close-buffers.vim' " Quickly close buffers
Plug 'justincampbell/vim-eighties' " Auto resize windows
Plug 'tpope/vim-commentary' " Comment stuff out
Plug 'ryanoasis/vim-devicons' " File type icons
Plug 'scrooloose/nerdtree' " Tree explorer
Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " Extra syntax and highlight for NERDTree
Plug 'jiangmiao/auto-pairs' " Insert or delete in pairs
Plug 'tpope/vim-fugitive' " Git wrapper
Plug 'gcmt/taboo.vim' " Utils for tabs
Plug 'vim-airline/vim-airline' " Status line
Plug 'vim-airline/vim-airline-themes' " Themes for vim-airline
Plug 'ctrlpvim/ctrlp.vim' " Fuzzy finder
Plug 'sheerun/vim-polyglot' " Syntax highlight
Plug 'dense-analysis/ale' " Linting
Plug 'dylanaraps/wal.vim' " Pywal colorscheme
Plug 'aswathkk/DarkScene.vim' " Dark theme
Plug 'brafales/vim-desert256' " Desert theme
call plug#end()

" Basic configuration
let mapleader=","
set encoding=utf-8
set hidden
set lazyredraw
set wrap
syntax on
filetype plugin indent on

" UI
set background=dark
set fillchars+=vert:│
set laststatus=2
set ruler
set showmatch
set title
set wildmenu
colorscheme wal

" Enable the use of the mouse
if has("gui_running")
    set mouse=a
else
    set mouse=
endif

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" File saving shortcuts
map <silent> <leader>wq :wq<cr>
map <silent> <leader>ww :w<cr>

" Quit operations
map <silent> <leader>qa :qa<cr>

" Compile a document
map <leader>c :w! \| !compiler <c-r>%<CR>

" Copy/Paste from X11 clipboard
vnoremap <C-c> :!xclip -f -sel clip<CR>
map <C-v><C-v> mz:-1r !xclip -o -sel clip<CR>`z
map <F2> :set paste!<CR>

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Spell checking
map <F5> :setlocal spell! spelllang=en_us<CR>
map <F6> :setlocal spell! spelllang=es<CR>
set spellfile=$HOME/.local/vim/spell/en.utf-8.add,$HOME/.local/vim/spell/es.utf-8.add

" Split
set splitbelow splitright
nmap <leader>sp :sp<CR>
nmap <leader>vp :vsp<CR>
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Search
set ignorecase
set incsearch
set hlsearch
nnoremap <leader><leader> :nohlsearch<CR>

" New line with same indentation
set autoindent
set smartindent

" Buffer managment
map <leader>d :CloseThisBuffer<CR>
map <leader>dh :CloseHiddenBuffer<CR>
map <leader>bn :bnext<CR>
map <leader>bb :bprevious<CR>

" Tab characters
set list
set listchars=nbsp:¬,tab:»·,trail:·,extends:>
nnoremap <F3> :set list!<CR>

" Toggle line numbers
nmap <leader>n :NumbersOnOff<CR> <bar> :NumbersToggle<CR>

" Unix or Dos file format
map <leader>unix :set fileformat=unix<CR>
map <leader>dos :set fileformat=dos<CR>

" Write file if you forgot to give it sudo permission
map <leader>sudo :w !sudo tee % <CR><CR>

" Remove all trailing spaces
noremap <leader>ts :%s/\s\+$//g<CR>
autocmd BufWritePre * %s/\s\+$//e

" Navigating with guides
inoremap <leader><TAB> <Esc>/<++><Enter>
vnoremap <leader><TAB> <Esc>/<++><Enter>
map <leader><TAB> <Esc>/<++><Enter>

" Vim Sessions
let g:session_autosave='no'
let g:session_directory='~/.local/vim/session'
map <leader>save :SaveSession<space>
map <leader>open :OpenSession<space>

" Vim Eighties
let g:eighties_enabled = 1
let g:eighties_minimum_width = 120

" Nerd Tree
let g:NERDTreeCaseSensitiveSort=1
let g:NERDTreeShowHidden=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeIgnore = ['\.pyc$', '__pycache__', '.git$']
map <leader>t :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" Nerd Tree Highlight
let g:NERDTreeHighlightFolders = 1
let g:NERDTreeHighlightFoldersFullName = 1
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

" Vim Airline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols_branch = ''
let g:airline_symbols_readonly = ''
let g:airline_symbols_linenr = '☰'
let g:airline_symbols_maxlinenr = ''
let g:airline_symbols_dirty='⚡'
let g:airline_section_x = '%{WebDevIconsGetFileTypeSymbol()}'

" Use fd for ctrlp.
if executable('fd')
    let g:ctrlp_user_command = 'fd -c never "" %s'
    let g:ctrlp_use_caching = 0
endif
map <C-b> :CtrlPBuffer<CR>

" Taboo
let g:taboo_modified_tab_flag='+'
let g:taboo_tab_format=' [%m%f - %W] '
let g:taboo_renamed_tab_format=' [%l%m - %W] '
set sessionoptions+=tabpages,globals
map <leader>r :TabooRename<space>

" Map sort function to a key
vnoremap <leader>s :sort<CR>

" Easier moving of code blocks
vnoremap < <gv
vnoremap > >gv

" Folding with space
nnoremap <space> za

" ALE
let g:ale_linters = {
      \   'python': ['flake8', 'pylint'],
\}

let g:ale_fixers = {
      \    'python': ['standardrb'],
\}

nmap <F10> :ALEFix<CR>
let g:ale_fix_on_save = 0

"" LaTeX
autocmd FileType tex inoremap ,em \emph{}<++><Esc>T{i
autocmd FileType tex inoremap ,bf \textbf{}<++><Esc>T{i
autocmd FileType tex inoremap ,it \textit{}<++><Esc>T{i
autocmd FileType tex inoremap ,ol \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd FileType tex inoremap ,ul \begin{itemize}<Enter><Enter>\end{itemize}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd FileType tex inoremap ,li <Enter>\item<Space>
autocmd FileType tex inoremap ,sec \section{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,ssec \subsection{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,sssec \subsubsection{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,beg \begin{DELRN}<Enter><++><Enter>\end{DELRN}<Enter><Enter><++><Esc>4k0fR:MultipleCursorsFind<Space>DELRN<Enter>c
autocmd FileType tex inoremap ,lab \label{}<Esc>T{i
autocmd FileType tex inoremap ,ref \ref{}<Esc>T{i
autocmd FileType tex inoremap ,ct \textcite{}<++><Esc>T{i
autocmd FileType tex inoremap ,cp \parencite{}<++><Esc>T{i
autocmd FileType tex inoremap ,ct \textcite{}<++><Esc>T{i
autocmd FileType tex inoremap ,cp \parencite{}<++><Esc>T{i
autocmd FileType tex inoremap ,chap \chapter{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,up <Esc>/usepackage<Enter>o\usepackage{}<Esc>i
autocmd VimLeave *.tex !texclear %

"" Python
autocmd BufNewFile,BufRead *.py inoremap ,she #!/usr/bin/env python<Esc>o
autocmd BufNewFile,BufRead *.py inoremap ,fr from <++> import <++><Esc>0f<cw
autocmd BufNewFile,BufRead *.py inoremap ,wh while :<Enter><++><Esc>k0f:i
autocmd BufNewFile,BufRead *.py inoremap ,cl class (<++>):<Enter><++><Esc>k0f(i
autocmd BufNewFile,BufRead *.py inoremap ,def def (<++>):<Enter><++><Esc>k0f(i
autocmd BufNewFile,BufRead *.py inoremap ,adef async def (<++>):<Enter><++><Esc>k0f(i
autocmd BufNewFile,BufRead *.py inoremap ,if if :<Enter><++><Esc>k0f:i
autocmd BufNewFile,BufRead *.py inoremap ,el else:<Enter>
autocmd BufNewFile,BufRead *.py inoremap ,ei elif :<Enter><++><Esc>k0f:i
autocmd BufNewFile,BufRead *.py inoremap ,for for <++> in <++>:<Enter><++><Esc>k0f<cw
autocmd BufNewFile,BufRead *.py set tabstop=8
autocmd BufNewFile,BufRead *.py set expandtab
autocmd BufNewFile,BufRead *.py set softtabstop=4
autocmd BufNewFile,BufRead *.py set shiftwidth=4
autocmd BufNewFile,BufRead *.py set foldmethod=indent
autocmd BufNewFile,BufRead *.py set colorcolumn=80
