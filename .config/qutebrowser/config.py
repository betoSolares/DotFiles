# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Read the colors from wal
import json
with open ("/home/beto/.cache/wal/colors.json") as f:
    colors = json.load(f)

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands
c.aliases = {
    "q" : "close",
    "qa": "quit",
    "w" : "session-save",
    "wq" : "quit --save",
    "wqa" : "quit --save"
}

# Time interval (in milliseconds) between auto-saves of config/cookies/etc.
c.auto_save.interval = 10000

# Always restore open sites when qutebrowser is reopened.
c.auto_save.session = False

# Backend to use to display websites.
c.backend = "webengine"

# Number of commands to save in the command history. 0: no history / -1: unlimited
c.completion.cmd_history_max_items = 25

# Delay (in milliseconds) before updating completions after typing a character.
c.completion.delay = 0

# Height (in pixels or as percentage of the window) of the completion.
c.completion.height = "25%"

# Minimum amount of characters needed to update completions.
c.completion.min_chars = 1

# Which categories to show (in which order) in the :open completion.
c.completion.open_categories = ["quickmarks", "bookmarks", "searchengines", "history"]

# Move on to the next part when thereâ€™s only one possible completion left.
c.completion.quick = True

# Padding (in pixels) of the scrollbar handle in the completion window.
c.completion.scrollbar.padding = 1

# Width (in pixels) of the scrollbar in the completion window.
c.completion.scrollbar.width = 12

# When to show the autocompletion window.
c.completion.show = "always"

# Shrink the completion to be smaller than the configured size if there are no scrollbars.
c.completion.shrink = True

# Format of timestamps (e.g. for the history completion).
c.completion.timestamp_format = "%d-%m-%Y"

# Execute the best-matching command on a partial match.
c.completion.use_best_match = True

# A list of patterns which should not be shown in the history.
c.completion.web_history.exclude = []

# Number of URLs to show in the web history. 0: no history / -1: unlimited
c.completion.web_history.max_items = -1

# Require a confirmation before quitting the application.
c.confirm_quit = ["downloads"]

# Automatically start playing <video> elements.
c.content.autoplay = True

# Enable support for the HTML 5 web application cache feature.
c.content.cache.appcache = True

# Maximum number of pages to hold in the global memory page cache.
c.content.cache.maximum_pages = 0

# Size (in bytes) of the HTTP network cache.
c.content.cache.size = None

# Allow websites to read canvas elements.
c.content.canvas_reading = True

# Which cookies to accept.
c.content.cookies.accept = "all"

# Store cookies.
c.content.cookies.store = True

# Default encoding to use for websites.
c.content.default_encoding = "utf-8"

# Allow websites to share screen content.
c.content.desktop_capture = "ask"

# Try to pre-fetch DNS entries to speed up browsing.
c.content.dns_prefetch = True

# Expand each subframe to its contents. This will flatten all the frames to become one scrollable page.
c.content.frame_flattening = False

# Allow websites to request geolocations.
c.content.geolocation = "ask"

# Value to send in the Accept-Language header
c.content.headers.accept_language = "en-US,en"

# Custom headers for qutebrowser HTTP requests.
c.content.headers.custom = {}

# Value to send in the DNT header.
c.content.headers.do_not_track = True

# When to send the Referer header. The Referer header tells websites from which website you were coming from when visiting them.
c.content.headers.referer = "same-domain"

# User agent to send.
c.content.headers.user_agent = None

# Enable host blocking.
c.content.host_blocking.enabled = False

# List of URLs of lists which contain hosts to block.
c.content.host_blocking.lists = []

# A list of patterns that should always be loaded, despite being ad-blocked.
c.content.host_blocking.whitelist = []

# Enable hyperlink auditing (<a ping>).
c.content.hyperlink_auditing = False

# Load images automatically in web pages.
c.content.images = True

# Show javascript alerts.
c.content.javascript.alert = True

# Allow JavaScript to read from or write to the clipboard.
c.content.javascript.can_access_clipboard = True

# Allow JavaScript to close tabs.
c.content.javascript.can_close_tabs = True

# Allow JavaScript to open new tabs without user interaction.
c.content.javascript.can_open_tabs_automatically = False

# Enable JavaScript.
c.content.javascript.enabled = True

# Log levels to use for JavaScript console logging messages.
c.content.javascript.log = {
    "error" : "debug",
    "info" : "debug",
    "unknown" : "debug",
    "warning" : "debug"
}

# Use the standard JavaScript modal dialog for alert() and confirm().
c.content.javascript.modal_dialog = True

# Show javascript prompts.
c.content.javascript.prompt = True

# Allow locally loaded documents to access other local URLs.
c.content.local_content_can_access_file_urls = True

# Allow locally loaded documents to access remote URLs.
c.content.local_content_can_access_remote_urls = True

# Enable support for HTML 5 local storage and Web SQL.
c.content.local_storage = True

# Allow websites to record audio/video.
c.content.media_capture = "ask"

# Allow websites to lock your mouse pointer.
c.content.mouse_lock = "ask"

# Automatically mute tabs. 
c.content.mute = False

# Netrc-file for HTTP authentication.
c.content.netrc_file = None

# Allow websites to show notifications.
c.content.notifications = "ask"

# Allow pdf.js to view PDF files in the browser. 
c.content.pdfjs = True

# Allow websites to request persistent storage quota via navigator.webkitPersistentStorage.requestQuota.
c.content.persistent_storage = "ask"

# Enable plugins in Web pages.
c.content.plugins = False

# Draw the background color and images also when the page is printed.
c.content.print_element_backgrounds = True

# Open new windows in private browsing mode which does not record visited pages.
c.content.private_browsing = False

# Proxy to use.
c.content.proxy = "system"

# Send DNS requests over the configured proxy.
c.content.proxy_dns_requests = True

# Allow websites to register protocol handlers via navigator.registerProtocolHandler.
c.content.register_protocol_handler = "ask"

# Validate SSL handshakes.
c.content.ssl_strict = "ask"

# List of user stylesheet filenames to use.
c.content.user_stylesheets = []

# Enable WebGL.
c.content.webgl = True

# Which interfaces to expose via WebRTC.
c.content.webrtc_ip_handling_policy = "all-interfaces"

# Limit fullscreen to the browser window (does not expand to fill the screen).
c.content.windowed_fullscreen = False

# Monitor load requests for cross-site scripting attempts. 
c.content.xss_auditing = True

# Directory to save downloads to.
c.downloads.location.directory = ""

# Prompt the user for the download location.
c.downloads.location.prompt = True

# Remember the last used download directory.
c.downloads.location.remember = False

# What to display in the download filename input.
c.downloads.location.suggestion = "both"

# Default program used to open downloads.
c.downloads.open_dispatcher = None

# Where to show the downloaded files.
c.downloads.position = "bottom"

# Duration (in milliseconds) to wait before removing finished downloads.
c.downloads.remove_finished = 1000

# Editor (and arguments) to use for the open-editor command.
c.editor.command = ["st", "-e", "vim", "{file}"]

# Encoding to use for the editor.
c.editor.encoding = "utf-8"

# Font used in the completion categories.
c.fonts.completion.category = "bold 10pt monospace"

# Font used in the completion widget.
c.fonts.completion.entry = "bold 10pt monospace"

# Font used for the debugging console.
c.fonts.debug_console = "bold 10pt monospace"

# Font used for the downloadbar.
c.fonts.downloads = "bold 10pt monospace"

# Font used for the hints.
c.fonts.hints = "bold 10pt monospace"

# Font used in the keyhint widget.
c.fonts.keyhint = "bold 10pt monospace"

# Font used for error messages.
c.fonts.messages.error = "10pt monospace"

# Font used for info messages.
c.fonts.messages.info = "10pt monospace"

# Font used for warning messages.
c.fonts.messages.warning = "10pt monospace"

# Default monospace fonts.
c.fonts.monospace = "monospace"

# Font used for prompts.
c.fonts.prompts = "10pt monospace"

# Font used in the statusbar.
c.fonts.statusbar = "bold 10pt monospace"

# Font used in the tab bar.
c.fonts.tabs = "bold 10pt monospace"

# Font family for cursive fonts.
c.fonts.web.family.cursive = None

# Font family for fantasy fonts.
c.fonts.web.family.fantasy = None

# Font family for fixed fonts.
c.fonts.web.family.fixed = None

# Font family for sans-serif fonts.
c.fonts.web.family.sans_serif = None

# Font family for serif fonts.
c.fonts.web.family.serif = None

# Font family for standard fonts.
c.fonts.web.family.standard = None

# Default font size (in pixels) for regular text.
c.fonts.web.size.default = 16

# Default font size (in pixels) for fixed-pitch text.
c.fonts.web.size.default_fixed = 13

# Hard minimum font size (in pixels).
c.fonts.web.size.minimum = 0

# Minimum logical font size (in pixels) that is applied when zooming out.
c.fonts.web.size.minimum_logical = 6

# When a hint can be automatically followed without pressing Enter.
c.hints.auto_follow = "unique-match"

# Duration (in milliseconds) to ignore normal-mode key bindings after a successful auto-follow.
c.hints.auto_follow_timeout = 0

# Characters used for hint strings.
c.hints.chars = "asdfghjkl"

# Dictionary file to be used by the word hints.
c.hints.dictionary = "/usr/share/dict/words"

# Which implementation to use to find elements to hint.
c.hints.find_implementation = "python"

# Hide unmatched hints in rapid mode.
c.hints.hide_unmatched_rapid_hints = True

# Minimum number of characters used for hint strings.
c.hints.min_chars = 1

# Mode to use for hints.
c.hints.mode = "letter"

# Scatter hint key chains (like Vimium) or not (like dwb). Ignored for number hints.
c.hints.scatter = True

# Make characters in hint strings uppercase.
c.hints.uppercase = False

# Maximum time (in minutes) between two history items for them to be considered being from the same browsing session.
c.history_gap_interval = 30

# Allow Escape to quit the crash reporter.
c.input.escape_quits_reporter = True

# Which unbound keys to forward to the webview in normal mode.
c.input.forward_unbound_keys = "auto"

# Enter insert mode if an editable element is clicked.
c.input.insert_mode.auto_enter = True

# Leave insert mode if a non-editable element is clicked.
c.input.insert_mode.auto_leave = True

# Automatically enter insert mode if an editable element is focused after loading the page.
c.input.insert_mode.auto_load = False

# Leave insert mode when starting a new page load.
c.input.insert_mode.leave_on_load = True

# Leave insert mode when starting a new page load.
c.input.insert_mode.plugins = False

# Include hyperlinks in the keyboard focus chain when tabbing.
c.input.links_included_in_focus_chain = True

# Timeout (in milliseconds) for partially typed key bindings. 
c.input.partial_timeout = 5000

# Enable Opera-like mouse rocker gestures. This disables the context menu.
c.input.rocker_gestures = False

# Enable spatial navigation.
c.input.spatial_navigation = False

# Keychains that shouldnâ€™t be shown in the keyhint dialog. 
c.keyhint.blacklist = []

# Time (in milliseconds) from pressing a key to seeing the keyhint dialog.
c.keyhint.delay = 1000

# Rounding radius (in pixels) for the edges of the keyhint dialog.
c.keyhint.radius = 10

# Duration (in milliseconds) to show messages in the statusbar for. Set to 0 to never clear messages.
c.messages.timeout = 2500

# How to open links in an existing instance if a new one is launched.
c.new_instance_open_target = "tab"

# Which window to choose when opening links as new tabs.
c.new_instance_open_target_window = "last-focused"

# Show a filebrowser in upload/download prompts.
c.prompt.filebrowser = True

# Rounding radius (in pixels) for the edges of prompts.
c.prompt.radius = 10

# Additional arguments to pass to Qt, without leading --.
c.qt.args = []

# Force a Qt platform to use.
c.qt.force_platform = None

# Force software rendering for QtWebEngine.
c.qt.force_software_rendering = "none"

# Turn on Qt HighDPI scaling.
c.qt.highdpi = False

# When to use Chromiumâ€™s low-end device mode.
c.qt.low_end_device_mode = "auto"

# Which Chromium process model to use.
c.qt.process_model = "process-per-site-instance"

# When to show the scrollbar.
c.scrolling.bar = "always"

# Enable smooth scrolling for web pages.
c.scrolling.smooth = False

# When to find text on a page case-insensitively.
c.search.ignore_case = "smart"

# Find text on a page incrementally, renewing the search for each typed character.
c.search.incremental = True

# Name of the session to save by default. If this is set to null, the session which was last loaded is saved.
c.session.default_name = None

# Load a restored tab as soon as it takes focus.
c.session.lazy_restore = False

# Languages to use for spell checking.
c.spellcheck.languages = []

# Hide the statusbar unless a message is shown.
c.statusbar.hide = False

# Padding (in pixels) for the statusbar.
c.statusbar.padding = {
    "bottom": 1,
    "left": 0,
    "right": 0,
    "top": 1
}

# Position of the status bar.
c.statusbar.position = "bottom"

# List of widgets displayed in the statusbar.
c.statusbar.widgets = ["keypress", "url", "scroll", "tabs", "progress"]

# Open new tabs (middleclick/ctrl+click) in the background.
c.tabs.background = True

# Mouse button with which to close tabs.
c.tabs.close_mouse_button = "middle"

# How to behave when the close mouse button is pressed on the tab bar.
c.tabs.close_mouse_button_on_bar = "new-tab"

# Scaling factor for favicons in the tab bar.
c.tabs.favicons.scale = 1.15

# When to show favicons in the tab bar.
c.tabs.favicons.show = "always"

# Padding (in pixels) for tab indicators.
c.tabs.indicator.padding = {
    "bottom": 2,
    "left": 0,
    "right": 4,
    "top": 2
}

# Width (in pixels) of the progress indicator (0 to disable).
c.tabs.indicator.width = 0

# How to behave when the last tab is closed.
c.tabs.last_close = "startpage"

# Maximum width (in pixels) of tabs (-1 for no maximum).
c.tabs.max_width = -1

# Minimum width (in pixels) of tabs (-1 for the default minimum size behavior). 
c.tabs.min_width = -1

# Minimum width (in pixels) of tabs (-1 for the default minimum size behavior). 
c.tabs.mode_on_change = "normal"

# Switch between tabs using the mouse wheel.
c.tabs.mousewheel_switching = True

# Position of new tabs opened from another tab.
c.tabs.new_position.related = "next"

# Stack related tabs on top of each other when opened consecutively. 
c.tabs.new_position.stacking = True

# Position of new tabs which are not opened from another tab.
c.tabs.new_position.unrelated = "last"

# Padding (in pixels) around text for tabs.
c.tabs.padding = {
    "bottom": 0,
    "left": 5,
    "right": 5,
    "top": 0
}

# Force pinned tabs to stay at fixed URL.
c.tabs.pinned.frozen = True

# Shrink pinned tabs down to their contents.
c.tabs.pinned.shrink = True

# Position of the tab bar.
c.tabs.position = "top"

# Which tab to select when the focused tab is removed.
c.tabs.select_on_remove = "next"

# When to show the tab bar.
c.tabs.show = "always"

# Duration (in milliseconds) to show the tab bar before hiding it when tabs.show is set to 'switching'.
c.tabs.show_switching_delay = 800

# Open a new window for every tab.
c.tabs.tabs_are_windows = False

# Alignment of the text inside of tabs.
c.tabs.title.alignment = "left"

# Format to use for the tab title.
c.tabs.title.format = "{audio}{current_title}"

# Format to use for the tab title for pinned tabs.
c.tabs.title.format_pinned = "{audio}{current_title}"

# Width (in pixels or as percentage of the window) of the tab bar if itâ€™s vertical.
c.tabs.width = "20%"

# Wrap when changing tabs.
c.tabs.wrap = True

# What search to start when something else than a URL is entered.
c.url.auto_search = "naive"

# Page to open if :open -t/-b/-w is used without URL.
c.url.default_page = "file:///home/beto/.config/qutebrowser/startpage/startpage.html"

# URL segments where :navigate increment/decrement will search for a number.
c.url.incdec_segments = ["path", "query"]

# Open base URL of the searchengine if a searchengine shortcut is invoked without parameters.
c.url.open_base_url = False

# Search engines which can be used via the address bar.
c.url.searchengines = {
    "DEFAULT": "https://www.google.com/search?q={}",
    "g": "https://www.google.com/search?q={}",
    "d": "https://www.duckduckgo.com/?q={}"
}

# Page(s) to open at the start.
c.url.start_pages = "file:///home/beto/.config/qutebrowser/startpage/startpage.html"

# URL parameters to strip with :yank url.
c.url.yank_ignored_parameters = ["ref", "utm_source", "utm_medium", "utm_campaign", "utm_term", "utm_content"]

# Hide the window decoration.
c.window.hide_decoration = False

# Format to use for the window title.
c.window.title_format = "{perc}{current_title}{title_sep}"

# Default zoom level.
c.zoom.default = "100%"

# Available zoom levels.
c.zoom.levels = ["25%", "33%", "50%", "67%", "75%", "90%", "100%", "110%", "125%", "150%", "175%", "200%", "250%", "300%", "400%", "500%"]

# Number of zoom increments to divide the mouse wheel movements to.
c.zoom.mouse_divider = 512

# Apply the zoom factor on a frame only to the text or to all content.
c.zoom.text_only = False

# Qutewal
config.source("qutewal.py")

# Key Bindings
config.bind('<Ctrl-0>', 'zoom')
config.bind('<Alt-j>', 'tab-next')
config.bind('<Alt-k>', 'tab-prev')
config.bind('<Alt-h>', 'back')
config.bind('<Alt-l>', 'forward')
config.bind('<Ctrl-m>', 'quickmark-save')
config.bind('<Alt-r>', 'reload -f')
config.bind('<Ctrl-i>', 'inspector')

