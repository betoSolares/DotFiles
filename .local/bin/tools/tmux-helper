#!/bin/sh
# Manage tmux sessions

usage() {
	printf "\nUsage:\n"
	printf "\ttmux-helper [-h | --help] <command> [<args>]\n"
	printf "\nThe supported commands are:\n"
	printf "\tcreate\t\t\tSave a new tmux session\n"
	printf "\tdelete <session_name>\tDelete a saved tmux session\n"
	printf "\tkill [<session_name>]\tKill a tmux session. If no <session_name> the server is kill\n"
	printf "\tlist [all]\t\tList the tmux sessions. If not all, would list on only active sessions\n"
	printf "\tload <session_name>\tOpen a tmux session\n"
}

create() {
	printf "\n"
	tmuxp freeze --force
}

delete() {
	printf "\n"

	if [ -z "$1" ]; then
		printf "session name not provided\n"
		return
	fi

	file_without_extension="$HOME/.local/share/tmuxp/$1"

	if [ -f "$file_without_extension.yaml" ]; then
		file="$file_without_extension.yaml"
	elif [ -f "$file_without_extension.json" ]; then
		file="$file_without_extension.json"
	else
		printf "session not found\n"
		return
	fi

	rm -fr "$file" && printf "session deleted\n"
}

kill_session() {
	printf "\n"

	if [ -z "$1" ]; then
		tmux kill-server && printf "tmux server killed\n"
		return
	fi

	tmux kill-session -t "$1" && printf "tmux session killed\n"
}

list() {
	printf "\n"

	if [ -z "$1" ]; then
		tmux ls
		return
	fi

	tmuxp ls
}

load() {
	printf "\n"

	if [ -z "$1" ]; then
		printf "session name not provided\n"
		return
	fi

	name="${1:-base}"
	tmuxp load "$1" 2>/dev/null || tmux a -t "${name}" || tmux new -s "${name}"
}

main() {
	case $1 in
	-h | --help) usage ;;
	create) create ;;
	delete) delete "$2" ;;
	kill) kill_session "$2" ;;
	list) list "$2" ;;
	load) load "$2" ;;
	*) printf "\nCommand not supported\n" && usage ;;
	esac

	printf "\n"
}

main "$@"
