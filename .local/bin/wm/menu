#!/usr/bin/env bash
#
# Generate desktop menu based on XDG Desktop Entries.
# https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#recognized-keys
# https://specifications.freedesktop.org/menu-spec/latest/apa.html
# https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html

# Globals
readonly DIRS=(/usr/share/applications/ \
               /usr/local/share/applications/ \
               "${HOME}"/.local/share/applications/)

readonly ICONS=("${HOME}"/.icons/ \
                /usr/local/share/icons/ \
                /usr/share/icons/ \
                /usr/share/pixmaps/)

declare -A DATA
declare -A VALUES

# Usage of the script.
# GLOBALS: None.
# Arguments: None.
# Returns: The usage of the script.
usage() {
  echo "
USAGE:
menu [WM_NAME] [OPTIONS]

WM_NAME:
  FVWM    The F Virtual Window Manager
  PEKWM   Window manager that once upon a time was based on the aewm++ window manager

OPTIONS:
  -i, --icons   Add icons to the menu
  -h, --help    Show help for command
"
}

# Get the correct menu category.
# Globals: None.
# Arguments: The list of possible categories.
# Returns: The menu category.
menu_category() {
  local category

  for i in $(echo "$1" | tr ";" "\n"); do
    if [[ -z "${category}" ]]; then
      case "${i}" in
        AudioVideo|Audio|Video) category="Multimedia" ;;
        Development) category="Development";;
        Game) category="Gaming" ;;
        Graphics) category="Graphics" ;;
        Network) category="Network" ;;
        System|Utility|Settings) category="System" ;;
        Education|Office|Science) category="Office" ;;
      esac
    fi
  done

  if [[ -z "${category}" ]]; then
    echo "Other"
  else
    echo "${category}"
  fi
}

# Parse the desktop entry data.
# Globals: DATA, VALUEs.
# Arguments: The data to parse.
# Returns: None
parse_data() {
  local no_display
  no_display=$(echo "$1" | grep "NoDisplay" | cut -d "=" -f 2)

  if [[ "${no_display}" != "true" ]]; then
    local name
    local terminal
    local icon
    local categories
    local execute

    name=$(echo "$1" | grep "Name" | cut -d "=" -f 2 | head -n 1)
    terminal=$(echo "$1" | grep "Terminal" | cut -d "=" -f 2 | head -n 1)
    icon=$(echo "$1" | grep "Icon" | cut -d "=" -f 2 | head -n 1)
    categories=$(echo "$1" | grep "Categories" | cut -d "=" -f 2 | head -n 1)
    execute=$(echo "$1" | grep "Exec" | cut -d "=" -f 2 | sed -e 's/%f//' \
                                                              -e 's/%F//' \
                                                              -e 's/%u//' \
                                                              -e 's/%U//' \
                                                              -e 's/%d//' \
                                                              -e 's/%D//' \
                                                              -e 's/%n//' \
                                                              -e 's/%N//' \
                                                              -e 's/%i//' \
                                                              -e 's/%c//' \
                                                              -e 's/%k//' \
                                                              -e 's/%v//' \
                                                              -e 's/%m//')
    execute=$(echo "${execute}" | head -n 1)

    local values
    if [[ "${terminal}" == "true" ]]; then
      values="${icon}°!#=%${TERMINAL} -e ${execute}"
    else
      values="${icon}°!#=%${execute}"
    fi
    VALUES["${name}"]="${values}"
    DATA[$(menu_category "${categories}")]+="${name}°!#=%"
  fi
}

# Get the XDG Desktop Entries data.
# Globals: DIRS.
# Arguments: None.
# Returns: The list of files.
get_files() {
  local entries
  readarray -t entries < <(find "${DIRS[@]}" -type f -name "*.desktop" 2>/dev/null)
  echo "${entries[@]}"
}

# Get and save the data.
# Globals: None.
# Arguments: None.
# Returns: None.
get_data() {
  command -v find >/dev/null 2>&1 || { echo >&2 "find is not installed"; exit 1; }
  files=$(get_files)

  if [[ -z "${files}" ]]; then
    echo "No files found" 1>&2
    exit 1
  else
    for file in $(echo "${files}" | tr " " "\n"); do
      text=$(sed -n "/\[Desktop Entry\]/,/\[Desktop/p" "${file}" \
              | grep -E "Categories=|Name=|Exec=|Icon=|Terminal=|NoDisplay=" \
              | grep -v -E "GenericName=|TryExec=|FullName")
      parse_data "${text}"
    done
  fi
}

# Get the correct icon.
# Gloabals: None.
# Arguments: The path for the icon.
# Returns: A new command.
correct_icon(){
  command -v convert >/dev/null 2>&1 || { echo >&2 "convert is not installed"; exit 1; }
  local icon
  readarray -t icon < <(find "${ICONS[@]}" -type f -name "*$1*" 2>/dev/null)
  cp -f "${icon}" /tmp
  icon=$(echo "${icon}" | rev | cut -d "/" -f 1 | rev)
  convert /tmp/"${icon}" -resize 16x16\> /tmp/"${icon}"
  echo "/tmp/${icon}"
}

# Get the correct command to run.
# Gloabals: None.
# Arguments: The exec to parse.
# Returns: A new command.
correct_executable(){
  local exec
  exec=$(echo -e "$1" | sed -e "s/^[[:space:]]*//" -e "s/[[:space:]]*$//")
  exec=$(echo "${exec}" | rev | cut -d "/" -f 1 | rev)
  echo "${exec}"
}

# Write the menu for FVWM.
# Globlas: DATA, VALUES.
# Arguments: If the menu has icons.
# Returns: The menu to stdout.
fvwm() {
  local cont

  cont=0
  for key in "${!DATA[@]}"; do
    echo "+ \"${key}\" PopUp ScriptMenu${cont}"
    ((cont++))
  done

  echo "+ \"\" Nop
+ \"Refresh\" Restart
+ \"Reboot\" Exec rebooting
+ \"Poweroff\" Exec shuttingdown"

  cont=0
  for key in "${!DATA[@]}"; do
    echo "
DestroyMenu ScriptMenu${cont}
AddToMenu   ScriptMenu${cont}"
    ((cont++))

    while IFS= read -r value; do
      local sub
      local icon
      local execute

      readarray -t sub <<< $(echo "${VALUES[${value}]}" | sed -e "s/°!#=%/\n/g")
      execute=$(correct_executable "${sub[1]}")

      if [[ "$1" == "true" ]]; then
        icon=$(correct_icon "${sub[0]}")
        echo "+ \"${value} %${icon}%\" Exec ${execute}"
      else
        echo "+ \"${value}\" Exec ${execute}"
      fi

    done <<< $(echo "${DATA[${key}]}" | sed -e "s/°!#=%/\n/g")

  done
}

# Write the menu for PEKWM.
# Globlas: DATA, VALUES.
# Arguments: If the menu has icons.
# Returns: The menu to stdout.
pekwm() {
  echo "RootMenu = \"PekWM\" {"

  for key in "${!DATA[@]}"; do
    echo "  Submenu = \"${key}\" {"

    while IFS= read -r value; do
      local sub
      local icon
      local execute

      readarray -t sub <<< $(echo "${VALUES[${value}]}" | sed -e "s/°!#=%/\n/g")
      execute=$(correct_executable "${sub[1]}")

      if [[ "$1" == "true" ]]; then
        icon=$(correct_icon "${sub[0]}")
        echo "    Entry = \"${value}\" { Icon = \"${icon}\"; Actions  = \"Exec ${execute} &\"}"
      else
        echo "    Entry = \"${value}\" { Actions  = \"Exec ${execute} &\"}"
      fi

    done <<< $(echo "${DATA[${key}]}" | sed -e "s/°!#=%/\n/g")

    echo "  }
    "

  done

  echo "  Separator {}

  Entry = \"Refresh\" { Actions = \"Restart\" }
  Entry = \"Reboot\" { Actions = \"Exec rebooting &\" }
  Entry = \"Poweroff\" { Actions = \"Exec shuttingdown &\" }
}

WindowMenu = \"Window Menu\" {
  Entry = \"(Un)Stick\" { Actions = \"Toggle Sticky\" }
  Entry = \"(Un)Shade\" { Actions = \"Toggle Shaded\" }
  Entry = \"Iconify\" { Actions = \"Set Iconified\" }

  Submenu = \"Maximize\" {
    Entry = \"Toggle Full\" { Actions = \"Toggle Maximized True True\" }
    Entry = \"Toggle Horizontal\" { Actions = \"Toggle Maximized True False\" }
    Entry = \"Toggle Vertical\" { Actions = \"Toggle Maximized False True\" }
  }
  Submenu = \"Fill\" {
    Entry = \"Full\" { Actions = \"MaxFill True True\" }
    Entry = \"Horizontal\" { Actions = \"MaxFill True False\" }
    Entry = \"Vertical\" { Actions = \"MaxFill False True\" }
  }
  Submenu = \"Stacking\" {
    Entry = \"Raise\" { Actions = \"Raise\" }
    Entry = \"Lower\" { Actions = \"Lower\" }
    Entry = \"Toggle Always On Top\" { Actions = \"Toggle AlwaysOnTop\" }
    Entry = \"Toggle Always Below\" { Actions = \"Toggle AlwaysBelow\" }
  }
  Submenu = \"Decorations\" {
    Entry = \"Toggle Decorations\" { Actions = \"Toggle DecorBorder; Toggle DecorTitlebar\" }
    Entry = \"Toggle Borders\" { Actions = \"Toggle DecorBorder\" }
    Entry = \"Toggle Titlebar\" { Actions = \"Toggle DecorTitlebar\" }
  }
  Separator {}
  Entry = \"Close\" { Actions = \"Close\" }
  Submenu = \"Kill\" { Entry = \"Kill application\" { Actions = \"Kill\" } }
}
"
}

# MAIN
if [[ -z "$1" ]]; then
  usage && exit 1
else
  wm="$1"
  shift

  icons="false"
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help) usage && exit 0 ;;
      -i|--icons) shift && icons="true" ;;
      *)
        echo "Not a supported flag"
        usage && exit 1
        ;;
    esac
  done

  if [[ "$wm" == "FVWM" ]]; then
    get_data && fvwm "${icons}"
  elif [[ "$wm" == "PEKWM" ]]; then
    get_data && pekwm "${icons}"
  else
    echo "Not a supported window manager"
    usage && exit 1
  fi
fi
